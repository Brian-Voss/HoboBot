/**
 * 
 */
package com.odin.helpers;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;

import org.apache.commons.io.comparator.LastModifiedFileComparator;
import org.apache.commons.io.filefilter.FileFileFilter;

/**
 * @author Brian
 *
 */
public class FileHelper {

	private String fileLocation;
	public FileHelper(String fileLocation)
	{
		
	}
	
	public FileHelper()
	{
		
	}
	public File[] getFiles()
	{
		//Grab all the log files from the location with the date specified
		File directory = new File(fileLocation);
		// get just files, not directories
		File[] files = directory.listFiles((FileFilter) FileFileFilter.FILE);

		Arrays.sort(files, LastModifiedFileComparator.LASTMODIFIED_REVERSE);
		System.out.println("\nLast Modified Descending Order (LASTMODIFIED_REVERSE)");
		return files;

	}

	@SuppressWarnings("deprecation")
	public static void displayTodaysFiles(File[] files) {
		
		Calendar today = Calendar.getInstance();
		today.clear(Calendar.HOUR); today.clear(Calendar.MINUTE); today.clear(Calendar.SECOND);
		Date todayDate = today.getTime();
		
		LocalDate rightNowDate = LocalDate.of( todayDate.getYear(), todayDate.getMonth() , todayDate.getDay());
		
		for (File file : files)
		{
			Date fileDate  = new Date(file.lastModified());
			
			if(fileDate.equals(rightNowDate))
			{
				System.out.printf("File: %-20s Last Modified:" + new Date(file.lastModified()) + "\n", file.getName());
			}
		}
	}
	
	public ArrayList<String> getTriggerFile()
	{
		ArrayList<String> fileUrls = new ArrayList<>();
		try {
			BufferedReader br = new BufferedReader(new FileReader("triggers.txt"));
			
			  // read the first line from the text file
	        String fileRead = br.readLine();

	        // loop until all lines are read
	        while (fileRead != null)
	        {
	        	fileUrls.add(fileRead);
	        	fileRead = br.readLine();
	        }
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return fileUrls;
	}
	
	public ArrayList<String> getMentorFile()
	{
		ArrayList<String> fileStrings = new ArrayList<>();
		try {
			BufferedReader br = new BufferedReader(new FileReader("mentors.txt"));
			
			  // read the first line from the text file
	        String fileRead = br.readLine();

	        // loop until all lines are read
	        while (fileRead != null)
	        {
	        	fileStrings.add(fileRead);
	        	fileRead = br.readLine();
	        }
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return fileStrings;
	}
	
	public  void parseFile()
	{
		try
		{
		 // create a Buffered Reader object instance with a FileReader
        BufferedReader br = new BufferedReader(new FileReader(fileLocation + "//00000005.log"));
        PrintWriter writer = new PrintWriter("logger.txt", "UTF-8");

        // read the first line from the text file
        String fileRead = br.readLine();

        // loop until all lines are read
        while (fileRead != null)
        {

            // use string.split to load a string array with the values from each line of
            // the file, using a comma as the delimiter
            String[] tokenize = fileRead.split("::");
            
           
            try{
           for(String token : tokenize)
           {
        	   token = token.replaceAll("[^a-zA-Z0-9]", " ");
        	   token = token.trim().replaceAll(" +", " ");
        
               writer.println(token);
              
        	   System.out.println(token);
        
  /*      	   if(token.contains("The Howling Eye Extreme has begun"))
        	   {
        		   continue;
        	   }
        	   else if(token.contains("The Howling Eye Extreme)"))
        		{
        		   return;
        		}*/
        		

           }

            // read next line before looping
            // if end of file reached 
            fileRead = br.readLine();
            } catch (IOException e) {
                // do something
             }
           
        }
		
        writer.close();
        br.close();
       
    }

    // handle exceptions
    catch (FileNotFoundException fnfe)
    {
        System.out.println("file not found");
    }

    catch (IOException ioe)
    {
        ioe.printStackTrace();
    }

    // display inventory
 

}




	public String getFileLocation() {
		return fileLocation;
	}

	public void setFileLocation(String fileLocation) {
		this.fileLocation = fileLocation;
	}
	
}
