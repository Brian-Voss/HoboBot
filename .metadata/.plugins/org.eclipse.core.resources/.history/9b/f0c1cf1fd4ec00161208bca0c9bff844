/**
 * 
 */
package com.odin.helpers;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;

import org.apache.commons.io.comparator.LastModifiedFileComparator;
import org.apache.commons.io.filefilter.FileFileFilter;

/**
 * @author Brian
 *
 */
public class FileHelper {

	private String fileLocation;
	public FileHelper(String fileLocation)
	{
		
	}
	
	public FileHelper()
	{
		
	}
	public boolean cleanupLogFile(Calendar date)
	{
		//Grab all the log files from the location with the date specified
		File directory = new File(fileLocation);
		// get just files, not directories
		File[] files = directory.listFiles((FileFilter) FileFileFilter.FILE);

		Arrays.sort(files, LastModifiedFileComparator.LASTMODIFIED_REVERSE);
		System.out.println("\nLast Modified Descending Order (LASTMODIFIED_REVERSE)");
		displayFiles(files);
		return true;

	}

	public static void displayFiles(File[] files) {
		
		Calendar today = Calendar.getInstance();
		today.clear(Calendar.HOUR); today.clear(Calendar.MINUTE); today.clear(Calendar.SECOND);
		Date todayDate = today.getTime();
		@SuppressWarnings("deprecation")
		LocalDate rightNowDate = LocalDate.of( todayDate.getYear(), todayDate.getMonth() , todayDate.getDay());
		
		for (File file : files)
		{
			Date fileDate  = new Date(file.lastModified());
			LocalDate fileDateFinal = LocalDate.of( fileDate.getYear(), fileDate.getMonth() , fileDate.getDay());
			
			if(fileDate.equals(rightNowDate))
			{
				System.out.printf("File: %-20s Last Modified:" + new Date(file.lastModified()) + "\n", file.getName());
			}
		}
	}

	public  void parseFile()
	{
		try
		{
		 // create a Buffered Reader object instance with a FileReader
        BufferedReader br = new BufferedReader(new FileReader(fileLocation + "//00000000.log"));

        // read the first line from the text file
        String fileRead = br.readLine();

        // loop until all lines are read
        while (fileRead != null)
        {

            // use string.split to load a string array with the values from each line of
            // the file, using a comma as the delimiter
            String[] tokenize = fileRead.split("::");

           for(String token : tokenize)
           {
        	   token = token.replaceAll("[^a-zA-Z0-9]", " ");
        	   token = token.trim().replaceAll(" +", " ");
        	   System.out.println(token);
        	   if(token.contains("The Howling Eye (Extreme) has ended."))
        	   {
        		   return;
        	   }
           }

            // read next line before looping
            // if end of file reached 
            fileRead = br.readLine();
        }

        // close file stream
        br.close();
    }

    // handle exceptions
    catch (FileNotFoundException fnfe)
    {
        System.out.println("file not found");
    }

    catch (IOException ioe)
    {
        ioe.printStackTrace();
    }

    // display inventory
 

}




	public String getFileLocation() {
		return fileLocation;
	}

	public void setFileLocation(String fileLocation) {
		this.fileLocation = fileLocation;
	}
	
}
